#!/usr/bin/env python
import os
import sys

# This executable may be invoked without a prior installation of launchit. 
# But since it depends on the `launchit` package, doing so would raise an 
# `ImportError`, because the executable, if still living in `/bin`, is not 
# part of the package structure. Adding the executable's parent directory 
# to `sys.path` will help python to find it (still assuming that the file
# hierarchy of this repository wasn't changed). But then, one problem still 
# remains: After being installed, the executable's path is usually something
# like `/usr/bin/launchit` (or `/usr/local/bin/launchit`) and using its parent 
# path (e.g. `/usr`) is kind of nonsense. To avoid that case, the parent path 
# is always checked for a sub-directory with the name `launchit`, which is 
# assumed to represent the package. If this is true, the path entry is added. 
# If not, the python path is left unchanged.

parent = os.path.join(os.path.dirname(__file__), os.pardir)
if os.path.isdir(os.path.join(parent, 'launchit')):
    sys.path.insert(0, os.path.abspath(parent))

filename = os.path.basename(__file__)
pid = os.getpid()
logger_name = '{0}({1})'.format(filename, pid)

import launchit
launchit.logger.enable(logger_name)
launchit.settings.update_config()
launchit.gui.main()
